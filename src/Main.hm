{-
Do not edit this file. Instead edit ../scripts/genMain.sh and regenerate it.
-}
module Main where

import Prelude

import System.OS (systemTimeIn)
import Data.Time (TimeUnit(..))
import Data.Int (toFloat)

import Day00 as D00
import Day01 as D01
import Day02 as D02
import Day03 as D03
import Day04 as D04
import Day05 as D05
import Day06 as D06
import Day07 as D07
import Day08 as D08
import Day09 as D09
import Day10 as D10
import Day11 as D11
import Day12 as D12
import Day13 as D13
import Day14 as D14
import Day15 as D15
import Day16 as D16
import Day17 as D17
import Day18 as D18
import Day19 as D19
import Day20 as D20
import Day21 as D21
import Day22 as D22
import Day23 as D23
import Day24 as D24
import Day25 as D25

main :: IO ()
main = do
    start00p1 <- systemTimeIn Microsecond
    let result00p1 = D00.part1 $ D00.input "./input/Day00p1.txt"
    printf "Force eval Day00: Part1 (%d)" result00p1 
    end00p1 <- systemTimeIn Microsecond
    let time00p1 = (toFloat (end00p1 - start00p1)) / 1000000.0
    printf "Day00: Part1 (%d, %2.6f)" result00p1 time00p1 

    {-
    start00p2 <- systemTimeIn Microsecond
    let result00p2 = D00.part2 $ D00.input "./input/Day00p1.txt"
    printf "Force eval Day00: Part2 (%d)" result00p2 
    end00p2 <- systemTimeIn Microsecond
    let time00p2 = (toFloat (end00p2 - start00p2)) / 1000000.0
    printf "Day00: Part2 (%d, %2.6f)" result00p2 time00p2 
    -}

    start01p1 <- systemTimeIn Microsecond
    let result01p1 = D01.part1 $ D01.input "./input/Day01p1.txt"
    printf "Force eval Day01: Part1 (%d)" result01p1 
    end01p1 <- systemTimeIn Microsecond
    let time01p1 = (toFloat (end01p1 - start01p1)) / 1000000.0
    printf "Day01: Part1 (%d, %2.6f)" result01p1 time01p1 

    {-
    start01p2 <- systemTimeIn Microsecond
    let result01p2 = D01.part2 $ D01.input "./input/Day01p1.txt"
    printf "Force eval Day01: Part2 (%d)" result01p2 
    end01p2 <- systemTimeIn Microsecond
    let time01p2 = (toFloat (end01p2 - start01p2)) / 1000000.0
    printf "Day01: Part2 (%d, %2.6f)" result01p2 time01p2 
    -}

    start02p1 <- systemTimeIn Microsecond
    let result02p1 = D02.part1 $ D02.input "./input/Day02p1.txt"
    printf "Force eval Day02: Part1 (%d)" result02p1 
    end02p1 <- systemTimeIn Microsecond
    let time02p1 = (toFloat (end02p1 - start02p1)) / 1000000.0
    printf "Day02: Part1 (%d, %2.6f)" result02p1 time02p1 

    {-
    start02p2 <- systemTimeIn Microsecond
    let result02p2 = D02.part2 $ D02.input "./input/Day02p1.txt"
    printf "Force eval Day02: Part2 (%d)" result02p2 
    end02p2 <- systemTimeIn Microsecond
    let time02p2 = (toFloat (end02p2 - start02p2)) / 1000000.0
    printf "Day02: Part2 (%d, %2.6f)" result02p2 time02p2 
    -}

    start03p1 <- systemTimeIn Microsecond
    let result03p1 = D03.part1 $ D03.input "./input/Day03p1.txt"
    printf "Force eval Day03: Part1 (%d)" result03p1 
    end03p1 <- systemTimeIn Microsecond
    let time03p1 = (toFloat (end03p1 - start03p1)) / 1000000.0
    printf "Day03: Part1 (%d, %2.6f)" result03p1 time03p1 

    {-
    start03p2 <- systemTimeIn Microsecond
    let result03p2 = D03.part2 $ D03.input "./input/Day03p1.txt"
    printf "Force eval Day03: Part2 (%d)" result03p2 
    end03p2 <- systemTimeIn Microsecond
    let time03p2 = (toFloat (end03p2 - start03p2)) / 1000000.0
    printf "Day03: Part2 (%d, %2.6f)" result03p2 time03p2 
    -}

    start04p1 <- systemTimeIn Microsecond
    let result04p1 = D04.part1 $ D04.input "./input/Day04p1.txt"
    printf "Force eval Day04: Part1 (%d)" result04p1 
    end04p1 <- systemTimeIn Microsecond
    let time04p1 = (toFloat (end04p1 - start04p1)) / 1000000.0
    printf "Day04: Part1 (%d, %2.6f)" result04p1 time04p1 

    {-
    start04p2 <- systemTimeIn Microsecond
    let result04p2 = D04.part2 $ D04.input "./input/Day04p1.txt"
    printf "Force eval Day04: Part2 (%d)" result04p2 
    end04p2 <- systemTimeIn Microsecond
    let time04p2 = (toFloat (end04p2 - start04p2)) / 1000000.0
    printf "Day04: Part2 (%d, %2.6f)" result04p2 time04p2 
    -}

    start05p1 <- systemTimeIn Microsecond
    let result05p1 = D05.part1 $ D05.input "./input/Day05p1.txt"
    printf "Force eval Day05: Part1 (%d)" result05p1 
    end05p1 <- systemTimeIn Microsecond
    let time05p1 = (toFloat (end05p1 - start05p1)) / 1000000.0
    printf "Day05: Part1 (%d, %2.6f)" result05p1 time05p1 

    {-
    start05p2 <- systemTimeIn Microsecond
    let result05p2 = D05.part2 $ D05.input "./input/Day05p1.txt"
    printf "Force eval Day05: Part2 (%d)" result05p2 
    end05p2 <- systemTimeIn Microsecond
    let time05p2 = (toFloat (end05p2 - start05p2)) / 1000000.0
    printf "Day05: Part2 (%d, %2.6f)" result05p2 time05p2 
    -}

    start06p1 <- systemTimeIn Microsecond
    let result06p1 = D06.part1 $ D06.input "./input/Day06p1.txt"
    printf "Force eval Day06: Part1 (%d)" result06p1 
    end06p1 <- systemTimeIn Microsecond
    let time06p1 = (toFloat (end06p1 - start06p1)) / 1000000.0
    printf "Day06: Part1 (%d, %2.6f)" result06p1 time06p1 

    {-
    start06p2 <- systemTimeIn Microsecond
    let result06p2 = D06.part2 $ D06.input "./input/Day06p1.txt"
    printf "Force eval Day06: Part2 (%d)" result06p2 
    end06p2 <- systemTimeIn Microsecond
    let time06p2 = (toFloat (end06p2 - start06p2)) / 1000000.0
    printf "Day06: Part2 (%d, %2.6f)" result06p2 time06p2 
    -}

    start07p1 <- systemTimeIn Microsecond
    let result07p1 = D07.part1 $ D07.input "./input/Day07p1.txt"
    printf "Force eval Day07: Part1 (%d)" result07p1 
    end07p1 <- systemTimeIn Microsecond
    let time07p1 = (toFloat (end07p1 - start07p1)) / 1000000.0
    printf "Day07: Part1 (%d, %2.6f)" result07p1 time07p1 

    {-
    start07p2 <- systemTimeIn Microsecond
    let result07p2 = D07.part2 $ D07.input "./input/Day07p1.txt"
    printf "Force eval Day07: Part2 (%d)" result07p2 
    end07p2 <- systemTimeIn Microsecond
    let time07p2 = (toFloat (end07p2 - start07p2)) / 1000000.0
    printf "Day07: Part2 (%d, %2.6f)" result07p2 time07p2 
    -}

    start08p1 <- systemTimeIn Microsecond
    let result08p1 = D08.part1 $ D08.input "./input/Day08p1.txt"
    printf "Force eval Day08: Part1 (%d)" result08p1 
    end08p1 <- systemTimeIn Microsecond
    let time08p1 = (toFloat (end08p1 - start08p1)) / 1000000.0
    printf "Day08: Part1 (%d, %2.6f)" result08p1 time08p1 

    {-
    start08p2 <- systemTimeIn Microsecond
    let result08p2 = D08.part2 $ D08.input "./input/Day08p1.txt"
    printf "Force eval Day08: Part2 (%d)" result08p2 
    end08p2 <- systemTimeIn Microsecond
    let time08p2 = (toFloat (end08p2 - start08p2)) / 1000000.0
    printf "Day08: Part2 (%d, %2.6f)" result08p2 time08p2 
    -}

    start09p1 <- systemTimeIn Microsecond
    let result09p1 = D09.part1 $ D09.input "./input/Day09p1.txt"
    printf "Force eval Day09: Part1 (%d)" result09p1 
    end09p1 <- systemTimeIn Microsecond
    let time09p1 = (toFloat (end09p1 - start09p1)) / 1000000.0
    printf "Day09: Part1 (%d, %2.6f)" result09p1 time09p1 

    {-
    start09p2 <- systemTimeIn Microsecond
    let result09p2 = D09.part2 $ D09.input "./input/Day09p1.txt"
    printf "Force eval Day09: Part2 (%d)" result09p2 
    end09p2 <- systemTimeIn Microsecond
    let time09p2 = (toFloat (end09p2 - start09p2)) / 1000000.0
    printf "Day09: Part2 (%d, %2.6f)" result09p2 time09p2 
    -}

    start10p1 <- systemTimeIn Microsecond
    let result10p1 = D10.part1 $ D10.input "./input/Day10p1.txt"
    printf "Force eval Day10: Part1 (%d)" result10p1 
    end10p1 <- systemTimeIn Microsecond
    let time10p1 = (toFloat (end10p1 - start10p1)) / 1000000.0
    printf "Day10: Part1 (%d, %2.6f)" result10p1 time10p1 

    {-
    start10p2 <- systemTimeIn Microsecond
    let result10p2 = D10.part2 $ D10.input "./input/Day10p1.txt"
    printf "Force eval Day10: Part2 (%d)" result10p2 
    end10p2 <- systemTimeIn Microsecond
    let time10p2 = (toFloat (end10p2 - start10p2)) / 1000000.0
    printf "Day10: Part2 (%d, %2.6f)" result10p2 time10p2 
    -}

    start11p1 <- systemTimeIn Microsecond
    let result11p1 = D11.part1 $ D11.input "./input/Day11p1.txt"
    printf "Force eval Day11: Part1 (%d)" result11p1 
    end11p1 <- systemTimeIn Microsecond
    let time11p1 = (toFloat (end11p1 - start11p1)) / 1000000.0
    printf "Day11: Part1 (%d, %2.6f)" result11p1 time11p1 

    {-
    start11p2 <- systemTimeIn Microsecond
    let result11p2 = D11.part2 $ D11.input "./input/Day11p1.txt"
    printf "Force eval Day11: Part2 (%d)" result11p2 
    end11p2 <- systemTimeIn Microsecond
    let time11p2 = (toFloat (end11p2 - start11p2)) / 1000000.0
    printf "Day11: Part2 (%d, %2.6f)" result11p2 time11p2 
    -}

    start12p1 <- systemTimeIn Microsecond
    let result12p1 = D12.part1 $ D12.input "./input/Day12p1.txt"
    printf "Force eval Day12: Part1 (%d)" result12p1 
    end12p1 <- systemTimeIn Microsecond
    let time12p1 = (toFloat (end12p1 - start12p1)) / 1000000.0
    printf "Day12: Part1 (%d, %2.6f)" result12p1 time12p1 

    {-
    start12p2 <- systemTimeIn Microsecond
    let result12p2 = D12.part2 $ D12.input "./input/Day12p1.txt"
    printf "Force eval Day12: Part2 (%d)" result12p2 
    end12p2 <- systemTimeIn Microsecond
    let time12p2 = (toFloat (end12p2 - start12p2)) / 1000000.0
    printf "Day12: Part2 (%d, %2.6f)" result12p2 time12p2 
    -}

    start13p1 <- systemTimeIn Microsecond
    let result13p1 = D13.part1 $ D13.input "./input/Day13p1.txt"
    printf "Force eval Day13: Part1 (%d)" result13p1 
    end13p1 <- systemTimeIn Microsecond
    let time13p1 = (toFloat (end13p1 - start13p1)) / 1000000.0
    printf "Day13: Part1 (%d, %2.6f)" result13p1 time13p1 

    {-
    start13p2 <- systemTimeIn Microsecond
    let result13p2 = D13.part2 $ D13.input "./input/Day13p1.txt"
    printf "Force eval Day13: Part2 (%d)" result13p2 
    end13p2 <- systemTimeIn Microsecond
    let time13p2 = (toFloat (end13p2 - start13p2)) / 1000000.0
    printf "Day13: Part2 (%d, %2.6f)" result13p2 time13p2 
    -}

    start14p1 <- systemTimeIn Microsecond
    let result14p1 = D14.part1 $ D14.input "./input/Day14p1.txt"
    printf "Force eval Day14: Part1 (%d)" result14p1 
    end14p1 <- systemTimeIn Microsecond
    let time14p1 = (toFloat (end14p1 - start14p1)) / 1000000.0
    printf "Day14: Part1 (%d, %2.6f)" result14p1 time14p1 

    {-
    start14p2 <- systemTimeIn Microsecond
    let result14p2 = D14.part2 $ D14.input "./input/Day14p1.txt"
    printf "Force eval Day14: Part2 (%d)" result14p2 
    end14p2 <- systemTimeIn Microsecond
    let time14p2 = (toFloat (end14p2 - start14p2)) / 1000000.0
    printf "Day14: Part2 (%d, %2.6f)" result14p2 time14p2 
    -}

    start15p1 <- systemTimeIn Microsecond
    let result15p1 = D15.part1 $ D15.input "./input/Day15p1.txt"
    printf "Force eval Day15: Part1 (%d)" result15p1 
    end15p1 <- systemTimeIn Microsecond
    let time15p1 = (toFloat (end15p1 - start15p1)) / 1000000.0
    printf "Day15: Part1 (%d, %2.6f)" result15p1 time15p1 

    {-
    start15p2 <- systemTimeIn Microsecond
    let result15p2 = D15.part2 $ D15.input "./input/Day15p1.txt"
    printf "Force eval Day15: Part2 (%d)" result15p2 
    end15p2 <- systemTimeIn Microsecond
    let time15p2 = (toFloat (end15p2 - start15p2)) / 1000000.0
    printf "Day15: Part2 (%d, %2.6f)" result15p2 time15p2 
    -}

    start16p1 <- systemTimeIn Microsecond
    let result16p1 = D16.part1 $ D16.input "./input/Day16p1.txt"
    printf "Force eval Day16: Part1 (%d)" result16p1 
    end16p1 <- systemTimeIn Microsecond
    let time16p1 = (toFloat (end16p1 - start16p1)) / 1000000.0
    printf "Day16: Part1 (%d, %2.6f)" result16p1 time16p1 

    {-
    start16p2 <- systemTimeIn Microsecond
    let result16p2 = D16.part2 $ D16.input "./input/Day16p1.txt"
    printf "Force eval Day16: Part2 (%d)" result16p2 
    end16p2 <- systemTimeIn Microsecond
    let time16p2 = (toFloat (end16p2 - start16p2)) / 1000000.0
    printf "Day16: Part2 (%d, %2.6f)" result16p2 time16p2 
    -}

    start17p1 <- systemTimeIn Microsecond
    let result17p1 = D17.part1 $ D17.input "./input/Day17p1.txt"
    printf "Force eval Day17: Part1 (%d)" result17p1 
    end17p1 <- systemTimeIn Microsecond
    let time17p1 = (toFloat (end17p1 - start17p1)) / 1000000.0
    printf "Day17: Part1 (%d, %2.6f)" result17p1 time17p1 

    {-
    start17p2 <- systemTimeIn Microsecond
    let result17p2 = D17.part2 $ D17.input "./input/Day17p1.txt"
    printf "Force eval Day17: Part2 (%d)" result17p2 
    end17p2 <- systemTimeIn Microsecond
    let time17p2 = (toFloat (end17p2 - start17p2)) / 1000000.0
    printf "Day17: Part2 (%d, %2.6f)" result17p2 time17p2 
    -}

    start18p1 <- systemTimeIn Microsecond
    let result18p1 = D18.part1 $ D18.input "./input/Day18p1.txt"
    printf "Force eval Day18: Part1 (%d)" result18p1 
    end18p1 <- systemTimeIn Microsecond
    let time18p1 = (toFloat (end18p1 - start18p1)) / 1000000.0
    printf "Day18: Part1 (%d, %2.6f)" result18p1 time18p1 

    {-
    start18p2 <- systemTimeIn Microsecond
    let result18p2 = D18.part2 $ D18.input "./input/Day18p1.txt"
    printf "Force eval Day18: Part2 (%d)" result18p2 
    end18p2 <- systemTimeIn Microsecond
    let time18p2 = (toFloat (end18p2 - start18p2)) / 1000000.0
    printf "Day18: Part2 (%d, %2.6f)" result18p2 time18p2 
    -}

    start19p1 <- systemTimeIn Microsecond
    let result19p1 = D19.part1 $ D19.input "./input/Day19p1.txt"
    printf "Force eval Day19: Part1 (%d)" result19p1 
    end19p1 <- systemTimeIn Microsecond
    let time19p1 = (toFloat (end19p1 - start19p1)) / 1000000.0
    printf "Day19: Part1 (%d, %2.6f)" result19p1 time19p1 

    {-
    start19p2 <- systemTimeIn Microsecond
    let result19p2 = D19.part2 $ D19.input "./input/Day19p1.txt"
    printf "Force eval Day19: Part2 (%d)" result19p2 
    end19p2 <- systemTimeIn Microsecond
    let time19p2 = (toFloat (end19p2 - start19p2)) / 1000000.0
    printf "Day19: Part2 (%d, %2.6f)" result19p2 time19p2 
    -}

    start20p1 <- systemTimeIn Microsecond
    let result20p1 = D20.part1 $ D20.input "./input/Day20p1.txt"
    printf "Force eval Day20: Part1 (%d)" result20p1 
    end20p1 <- systemTimeIn Microsecond
    let time20p1 = (toFloat (end20p1 - start20p1)) / 1000000.0
    printf "Day20: Part1 (%d, %2.6f)" result20p1 time20p1 

    {-
    start20p2 <- systemTimeIn Microsecond
    let result20p2 = D20.part2 $ D20.input "./input/Day20p1.txt"
    printf "Force eval Day20: Part2 (%d)" result20p2 
    end20p2 <- systemTimeIn Microsecond
    let time20p2 = (toFloat (end20p2 - start20p2)) / 1000000.0
    printf "Day20: Part2 (%d, %2.6f)" result20p2 time20p2 
    -}

    start21p1 <- systemTimeIn Microsecond
    let result21p1 = D21.part1 $ D21.input "./input/Day21p1.txt"
    printf "Force eval Day21: Part1 (%d)" result21p1 
    end21p1 <- systemTimeIn Microsecond
    let time21p1 = (toFloat (end21p1 - start21p1)) / 1000000.0
    printf "Day21: Part1 (%d, %2.6f)" result21p1 time21p1 

    {-
    start21p2 <- systemTimeIn Microsecond
    let result21p2 = D21.part2 $ D21.input "./input/Day21p1.txt"
    printf "Force eval Day21: Part2 (%d)" result21p2 
    end21p2 <- systemTimeIn Microsecond
    let time21p2 = (toFloat (end21p2 - start21p2)) / 1000000.0
    printf "Day21: Part2 (%d, %2.6f)" result21p2 time21p2 
    -}

    start22p1 <- systemTimeIn Microsecond
    let result22p1 = D22.part1 $ D22.input "./input/Day22p1.txt"
    printf "Force eval Day22: Part1 (%d)" result22p1 
    end22p1 <- systemTimeIn Microsecond
    let time22p1 = (toFloat (end22p1 - start22p1)) / 1000000.0
    printf "Day22: Part1 (%d, %2.6f)" result22p1 time22p1 

    {-
    start22p2 <- systemTimeIn Microsecond
    let result22p2 = D22.part2 $ D22.input "./input/Day22p1.txt"
    printf "Force eval Day22: Part2 (%d)" result22p2 
    end22p2 <- systemTimeIn Microsecond
    let time22p2 = (toFloat (end22p2 - start22p2)) / 1000000.0
    printf "Day22: Part2 (%d, %2.6f)" result22p2 time22p2 
    -}

    start23p1 <- systemTimeIn Microsecond
    let result23p1 = D23.part1 $ D23.input "./input/Day23p1.txt"
    printf "Force eval Day23: Part1 (%d)" result23p1 
    end23p1 <- systemTimeIn Microsecond
    let time23p1 = (toFloat (end23p1 - start23p1)) / 1000000.0
    printf "Day23: Part1 (%d, %2.6f)" result23p1 time23p1 

    {-
    start23p2 <- systemTimeIn Microsecond
    let result23p2 = D23.part2 $ D23.input "./input/Day23p1.txt"
    printf "Force eval Day23: Part2 (%d)" result23p2 
    end23p2 <- systemTimeIn Microsecond
    let time23p2 = (toFloat (end23p2 - start23p2)) / 1000000.0
    printf "Day23: Part2 (%d, %2.6f)" result23p2 time23p2 
    -}

    start24p1 <- systemTimeIn Microsecond
    let result24p1 = D24.part1 $ D24.input "./input/Day24p1.txt"
    printf "Force eval Day24: Part1 (%d)" result24p1 
    end24p1 <- systemTimeIn Microsecond
    let time24p1 = (toFloat (end24p1 - start24p1)) / 1000000.0
    printf "Day24: Part1 (%d, %2.6f)" result24p1 time24p1 

    {-
    start24p2 <- systemTimeIn Microsecond
    let result24p2 = D24.part2 $ D24.input "./input/Day24p1.txt"
    printf "Force eval Day24: Part2 (%d)" result24p2 
    end24p2 <- systemTimeIn Microsecond
    let time24p2 = (toFloat (end24p2 - start24p2)) / 1000000.0
    printf "Day24: Part2 (%d, %2.6f)" result24p2 time24p2 
    -}

    start25p1 <- systemTimeIn Microsecond
    let result25p1 = D25.part1 $ D25.input "./input/Day25p1.txt"
    printf "Force eval Day25: Part1 (%d)" result25p1 
    end25p1 <- systemTimeIn Microsecond
    let time25p1 = (toFloat (end25p1 - start25p1)) / 1000000.0
    printf "Day25: Part1 (%d, %2.6f)" result25p1 time25p1 

    {-
    start25p2 <- systemTimeIn Microsecond
    let result25p2 = D25.part2 $ D25.input "./input/Day25p1.txt"
    printf "Force eval Day25: Part2 (%d)" result25p2 
    end25p2 <- systemTimeIn Microsecond
    let time25p2 = (toFloat (end25p2 - start25p2)) / 1000000.0
    printf "Day25: Part2 (%d, %2.6f)" result25p2 time25p2 
    -}

