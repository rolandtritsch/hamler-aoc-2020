{-|
Problem: <https://adventofcode.com/2020/day/4>

Solution:

General - Mainly a file parsing problem. Parse/scan all passports. When/while
scanning all fields are optional (might be there or not). While checking only
cid is optional (all other fields need to be there).

Question is: What is the right datastructure for this? Could do a Map or a list
of key/value pairs or a record with optional fields (Maybe).

Let's go monadic. Let's use Maybe.

Part 1 - Scan the file and do the check.

Part 2 - ???
-}
module Day04 where

import Prelude

import Data.List (lookup, (!!))
import Data.String (join, replace, split, trim)
import Data.Binary (toStr)
import Data.Maybe (isJust, fromJust)
import Data.Result (fromOk)
import Data.Regex as R

type Passport = {
    birthYear :: Maybe String,
    issueYear :: Maybe String,
    expirationYear :: Maybe String,
    height :: Maybe String,
    hairColor :: Maybe String,
    eyeColor :: Maybe String,
    passportID :: Maybe String,
    countryID :: Maybe String    
}

makePassport :: [(String, String)] -> Passport
makePassport fields = {
    birthYear = lookup "byr" fields, 
    issueYear = lookup "iyr" fields,
    expirationYear = lookup "eyr" fields,
    height = lookup "hgt" fields,
    hairColor = lookup "hcl" fields,
    eyeColor = lookup "ecl" fields,
    passportID = lookup "pid" fields,
    countryID = lookup "cid" fields
}

isValid :: Passport -> Bool
isValid p = (
    isJust p.birthYear &&
    isJust p.issueYear &&
    isJust p.expirationYear &&
    isJust p.height &&
    isJust p.hairColor &&
    isJust p.eyeColor &&
    isJust p.passportID
)

isValid2 :: Passport -> Bool
isValid2 p = (
    isValidBirthYear p.birthYear &&        
    isValidIssueYear p.issueYear &&
    isValidExpirationYear p.expirationYear &&
    isValidHeight p.height &&
    isValidHairColor p.hairColor &&
    isValidEyeColor p.eyeColor &&
    isValidPassportID p.passportID
)

isValidBirthYear :: Maybe String -> Boolean
isValidBirthYear byr = if isJust byr then check (fromJust byr) else false where
    p = fromOk $ R.compile "^(\\d{4})$" []
    check f = if checkFormatted f p then checkValid f p else false where
      checkValid f' p' = checkValidRange value where
          value = read $ result !! 0 where
              result = tail $ R.split f' p' [R.Trim]
      checkValidRange v = v >= 1920 && v <= 2002

isValidIssueYear :: Maybe String -> Boolean
isValidIssueYear iyr = if isJust iyr then check (fromJust iyr) else false where
    p = fromOk $ R.compile "^(\\d{4})$" []
    check f = if checkFormatted f p then checkValid f p else false where
      checkValid f' p' = checkValidRange value where
          value = read $ result !! 0 where
              result = tail $ R.split f' p' [R.Trim]
      checkValidRange v = v >= 2010 && v <= 2020

isValidExpirationYear :: Maybe String -> Boolean
isValidExpirationYear eyr = if isJust eyr then check (fromJust eyr) else false where
    p = fromOk $ R.compile "^(\\d{4})$" []
    check f = if checkFormatted f p then checkValid f p else false where
      checkValid f' p' = checkValidRange value where
          value = read $ result !! 0 where
              result = tail $ R.split f' p' [R.Trim]
      checkValidRange v = v >= 2020 && v <= 2030

isValidHeight :: Maybe String -> Boolean
isValidHeight hgt = if isJust hgt then check (fromJust hgt) else false where
    p = fromOk $ R.compile "^(\\d.*)(cm|in)$" []
    check f = if checkFormatted f p then checkValid f p else false where
      checkValid f' p' = checkValidRange value unit where
          (value, unit) = (read $ result !! 0, result !! 1) where
              result = tail $ R.split f' p' [R.Trim]
      checkValidRange v "cm" = v >= 150 && v <= 193
      checkValidRange v "in" = v >= 59 && v <= 76
      checkValidRange _ _ = false

isValidHairColor :: Maybe String -> Boolean
isValidHairColor hcl = if isJust hcl then check (fromJust hcl) else false where
    p = fromOk $ R.compile "^(#[a-f0-9]{6})$" []
    check f = checkFormatted f p

isValidEyeColor :: Maybe String -> Boolean
isValidEyeColor ecl = if isJust ecl then check (fromJust ecl) else false where
    p = fromOk $ R.compile "^(amb|blu|brn|gry|grn|hzl|oth)$" []
    check f = checkFormatted f p

isValidPassportID :: Maybe String -> Boolean
isValidPassportID pid = if isJust pid then check (fromJust pid) else false where
    p = fromOk $ R.compile "^(\\d{9})$" []
    check f = checkFormatted f p

checkFormatted :: String -> R.Pattern -> Bool
checkFormatted field pattern = isMatch $ R.run field pattern [] where
    isMatch (R.Match _) = true
    isMatch _ = false

input :: String -> [Passport]
input filename = map makePassport passports where
    contents = toStr $ unsafePerformIO $ readFile filename
    passportLines = map processLine $ split contents "\n\n" where
        processLine l = trim $ join (replace l "\n" " ") ""
    passports = map makeFields passportLines where
        makeFields l = map keyValue $ split l " " where
            keyValue kv = (field !! 0, field !! 1) where
                field = split kv ":"

part1 :: [Passport] -> Integer
part1 ps = length $ filter isValid ps

part2 :: [Passport] -> Integer
part2 ps = length $ filter isValid2 ps
