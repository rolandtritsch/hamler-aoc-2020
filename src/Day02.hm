{-|
Problem: <https://adventofcode.com/2020/day/2>

Solution:

General - ???

Part 1 - ???

Part 2 - ???

-}
module Day02 where

import Prelude

import System.IO (readFile)
import Data.String (lines, words, split)
import Data.Binary (toStr)
import Data.List ((!!))

type Password = {
    min :: Integer,
    max :: Integer,
    char :: Char,
    password :: String
    }

input :: String -> [Password]
input filename = map parse $ tail $ reverse $ lines $ toStr $ contents where
    contents = unsafePerformIO $ readFile filename
    parse line = {min = min, max = max, char = char, password = password} where
      min = read $ split (words line !! 0) "-" !! 0
      max = read $ split (words line !! 0) "-" !! 1
      char = (split (words line !! 1) ":" !! 0) !! 0 
      password = words line !! 2

shouldBe :: ([Password] -> Integer) -> [Password] -> Integer -> Integer -> Boolean
shouldBe f ps n _ = f ps == n

part1 :: [Password] -> Integer
-- part1 passwords = length passwords
part1 passwords = length compliant where
    compliant = filter (\pw -> check pw) passwords
    check pw = number >= pw.min && number <= pw.max where
        number = length $ filter (\c -> c == pw.char) pw.password
    
part2 :: [Password] -> Integer
part2 passwords = length compliant where
    compliant = filter (\pw -> check pw) passwords
    check pw = (pw.char == pos1 || pw.char == pos2) && pos1 /= pos2 where
      pos1 = pw.password !! (pw.min - 1)
      pos2 = pw.password !! (pw.max - 1)
