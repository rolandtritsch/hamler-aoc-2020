{-|
Problem: <https://adventofcode.com/2020/day/3>

Solution:

General - (AFAI can see) Hamler does not support streams/lazy lists (yet).
Means for this one I will not use a datas structure based approach, but
will compute the solution :).

For that we will read the input and will build and array of lines that
have the tree positions on it (let's call it a forest).

I can then go into that forest with my current position (x, y) and can
check, if I am hitting a tree. Note: y needs to be modolo the line length.

Then I am repeating this n times (the number of lines in the input file)
advancing m steps (3) to the right until I am done (and count the number
of trees I am hitting on the way.

Part 1 - ???

Part 2 - ???
-}
module Day03 where

import Prelude

import Data.List (init, (!!), elem)
import Data.String as S
import Data.Binary (toStr)

shouldBe :: (Forrest -> Integer) -> Forrest -> Integer -> Integer -> Boolean
shouldBe f ts n _ = f ts == n

type Forrest = {
    xMax :: Integer,
    yMax :: Integer,
    trees :: [(Integer, Integer)]
}

input :: String -> Forrest
input filename = {xMax = xMax, yMax = yMax, trees = positions} where
    contents = unsafePerformIO $ readFile filename
    forrestLines = init $ S.lines $ toStr $ contents
    xMax = length forrestLines - 1
    yMax = S.length (forrestLines !! 0) - 1
    positions = [(x,y) | x <- [0 .. xMax], y <- findTrees (forrestLines !! x)] where
        findTrees treeLine = map fst $ filter (\(y, t) -> t == '#') treePositions where
            treePositions = zip [0 .. yMax] treeLine
            
part1 :: Forrest -> Integer
part1 forrest = length $ collisions where
    steps = [(x,y) | x <- [1 .. forrest.xMax], y <- [((x-1) * 3) + 3]] 
    collisions = filter inForest steps where
        inForest (x,y) = elem (x, y % (forrest.yMax + 1)) forrest.trees

part2 :: Forrest -> Integer
part2 forrest = forrest.xMax
