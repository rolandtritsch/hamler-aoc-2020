{-|
Problem: <https://adventofcode.com/2020/day/24>

Solution:

General - To solve this you have to think about (or google) how to
navigate/walk a hex-grid (https://trits.ch/3bJeNeZ).

To solve this we walk all the steps for any given tile and will end
up with a/the list of desination tiles.

Part 1 - Look for all destination tiles that are there/where flipped
an odd number of times.

Part 2 - ???
-}
module Day24 where

import Prelude

import Data.List (init, group)
import Data.String (lines)
import Data.Binary (toStr)
import Data.Result (fromOk)
import Data.Regex as R
import Data.Ord(Ordering(..))

type Step = String
type Steps = [Step]
type Tiles = [Steps]

data Position = Position Int Int

instance Eq Position where
  eq (Position x y) (Position x' y') = (x == x') && (y == y')

instance Ord Position where
  compare (Position x y) (Position x' y')
      | (x == x') && (y == y') = EQ
      | (x <= x') && (y < y') = LT
      | otherwise = GT

-- | read the input file.
input :: String -> Tiles
input filename = map processTile contents where
    contents = init $ lines $ toStr $ unsafePerformIO $ readFile filename
    processTile line = filter (\e -> e /= []) $ R.split line linePattern [] where
        linePattern = fromOk $ R.compile "(e|se|sw|w|nw|ne)" [] 

-- | walk a step (until there are no more steps)
walk :: Steps -> Position -> Position
walk [] position = position
walk ["e"|steps] (Position x y) = walk steps (Position (x + 1) y)
walk ["se"|steps] (Position x y) = walk steps (Position (x + 1) (y -1))
walk ["sw"|steps] (Position x y) = walk steps (Position x (y -1))
walk ["w"|steps] (Position x y) = walk steps (Position (x -1) y)
walk ["nw"|steps] (Position x y) = walk steps (Position (x -1) (y + 1))
walk ["ne"|steps] (Position x y) = walk steps (Position x (y + 1))
walk _ _ = error "Invalid step"

odd :: Integer -> Bool
odd n
    | n % 2 == 1 = true
    | otherwise = false

part1 :: Tiles -> Integer
part1 tiles = length $ filter (\(n, _) -> odd n) groupedByCount where
    destinationTiles = map (\steps -> walk steps (Position 0 0)) tiles
    groupedByCount = map (\positions -> (length positions, positions)) $ group $ sort destinationTiles

part2 :: Tiles -> Integer
part2 tiles = length tiles
